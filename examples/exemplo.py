#!/usr/bin/env python3
"""
Exemplo Principal - Demonstra√ß√£o da Rede Neural do Zero
Autor: S√°vio (https://github.com/SavioCodes)

Este exemplo demonstra:
1. Treinamento no dataset XOR
2. Avalia√ß√£o de performance  
3. Visualiza√ß√£o de resultados
4. M√©tricas detalhadas
"""

import sys
import os
import numpy as np
import matplotlib.pyplot as plt

# Adicionar o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.rede_neural import RedeNeural
from src.utils import DataUtils, VisualizationUtils, MetricUtils


def main():
    print("üß† REDE NEURAL DO ZERO - EXEMPLO PRINCIPAL")
    print("=" * 50)
    print("Autor: S√°vio (https://github.com/SavioCodes)")
    print("=" * 50)
    
    # ===== 1. PREPARA√á√ÉO DOS DADOS =====
    print("\nüìä 1. PREPARANDO DADOS...")
    
    # Dataset XOR cl√°ssico
    X_xor, y_xor = DataUtils.gerar_xor_dataset()
    print(f"Dataset XOR carregado: {X_xor.shape[0]} amostras, {X_xor.shape[1]} features")
    
    # Dataset de classifica√ß√£o mais complexo
    X_complex, y_complex = DataUtils.gerar_dataset_classificacao(n_samples=1000, noise=0.2)
    print(f"Dataset complexo gerado: {X_complex.shape[0]} amostras, {X_complex.shape[1]} features")
    
    # Normalizar dataset complexo
    X_complex_norm, norm_params = DataUtils.normalizar_dados(X_complex, metodo='padrao')
    
    # Dividir em treino e teste
    X_train, X_test, y_train, y_test = DataUtils.dividir_treino_teste(
        X_complex_norm, y_complex, test_size=0.2, random_state=42
    )
    
    print(f"Treino: {X_train.shape[0]} amostras | Teste: {X_test.shape[0]} amostras")
    
    # ===== 2. EXPERIMENTO 1: XOR =====
    print("\nüéØ 2. EXPERIMENTO 1: DATASET XOR")
    print("-" * 30)
    
    # Criar rede neural para XOR
    rede_xor = RedeNeural(
        arquitetura=[2, 4, 1],  # 2 entradas, 4 neur√¥nios ocultos, 1 sa√≠da
        ativacao='sigmoid',
        inicializacao='xavier'
    )
    
    print("Arquitetura da rede XOR:", rede_xor.arquitetura)
    print("Fun√ß√£o de ativa√ß√£o:", rede_xor.ativacao)
    
    # Treinar
    print("\nIniciando treinamento XOR...")
    rede_xor.treinar(
        X_xor, y_xor,
        epochs=2000,
        taxa_aprendizado=0.5,
        verbose=True
    )
    
    # Avaliar XOR
    print("\nüìà RESULTADOS XOR:")
    resultados_xor = rede_xor.avaliar(X_xor, y_xor)
    
    print(f"Erro final: {resultados_xor['erro']:.6f}")
    print(f"Acur√°cia: {resultados_xor['acuracia']:.2f}%")
    
    # Mostrar predi√ß√µes individuais
    print("\nPredi√ß√µes XOR individuais:")
    for i, (entrada, esperado) in enumerate(zip(X_xor, y_xor)):
        predicao = rede_xor.prever(entrada.reshape(1, -1))[0, 0]
        print(f"[{entrada[0]}, {entrada[1]}] ‚Üí Esperado: {esperado[0]}, Predito: {predicao:.4f}")
    
    # ===== 3. EXPERIMENTO 2: CLASSIFICA√á√ÉO COMPLEXA =====
    print("\nüéØ 3. EXPERIMENTO 2: CLASSIFICA√á√ÉO COMPLEXA")
    print("-" * 40)
    
    # Criar rede neural mais robusta
    rede_complex = RedeNeural(
        arquitetura=[2, 8, 4, 1],  # Rede mais profunda
        ativacao='relu',
        inicializacao='he'
    )
    
    print("Arquitetura da rede complexa:", rede_complex.arquitetura)
    print("Fun√ß√£o de ativa√ß√£o:", rede_complex.ativacao)
    
    # Treinar com valida√ß√£o
    print("\nIniciando treinamento com valida√ß√£o...")
    rede_complex.treinar(
        X_train, y_train,
        epochs=1500,
        taxa_aprendizado=0.01,
        verbose=True,
        validacao_X=X_test,
        validacao_y=y_test
    )
    
    # Avaliar no conjunto de teste
    print("\nüìà RESULTADOS NO CONJUNTO DE TESTE:")
    resultados_test = rede_complex.avaliar(X_test, y_test)
    
    print(f"Erro no teste: {resultados_test['erro']:.6f}")
    print(f"Acur√°cia no teste: {resultados_test['acuracia']:.2f}%")
    
    # ===== 4. M√âTRICAS DETALHADAS =====
    print("\nüìä 4. M√âTRICAS DETALHADAS")
    print("-" * 25)
    
    # Calcular m√©tricas avan√ßadas
    metricas = MetricUtils.precisao_recall_f1(y_test, resultados_test['predicoes'])
    
    print(f"Precis√£o: {metricas['precisao']:.4f}")
    print(f"Recall: {metricas['recall']:.4f}")
    print(f"F1-Score: {metricas['f1_score']:.4f}")
    
    print("\nMatriz de Confus√£o:")
    print(metricas['matriz_confusao'])
    print("         Pred: 0  1")
    print("Real: 0      TN  FP")
    print("      1      FN  TP")
    
    # ===== 5. VISUALIZA√á√ïES =====
    print("\nüé® 5. GERANDO VISUALIZA√á√ïES...")
    
    try:
        # Hist√≥rico de treinamento XOR
        print("Plotando hist√≥rico XOR...")
        VisualizationUtils.plotar_historico_treinamento(
            rede_xor.historico_erro,
            rede_xor.historico_acuracia,
            salvar='results/historico_xor.png'
        )
        
        # Hist√≥rico de treinamento complexo
        print("Plotando hist√≥rico classifica√ß√£o complexa...")
        VisualizationUtils.plotar_historico_treinamento(
            rede_complex.historico_erro,
            rede_complex.historico_acuracia,
            salvar='results/historico_complex.png'
        )
        
        # Dados e fronteira de decis√£o
        print("Plotando dados de classifica√ß√£o...")
        VisualizationUtils.plotar_dados_classificacao(
            X_test, y_test,
            titulo="Dataset de Teste",
            salvar='results/dados_teste.png'
        )
        
        # Fronteira de decis√£o
        print("Plotando fronteira de decis√£o...")
        VisualizationUtils.plotar_fronteira_decisao(
            rede_complex, X_test, y_test,
            titulo="Fronteira de Decis√£o - Rede Neural",
            salvar='results/fronteira_decisao.png'
        )
        
    except ImportError:
        print("‚ö†Ô∏è  Matplotlib n√£o dispon√≠vel. Visualiza√ß√µes puladas.")
        print("   Instale com: pip install matplotlib")
    
    # ===== 6. SALVAR MODELO =====
    print("\nüíæ 6. SALVANDO MODELOS...")
    
    # Criar diret√≥rio de resultados
    os.makedirs('results', exist_ok=True)
    
    # Salvar par√¢metros das redes
    rede_xor.salvar_parametros('results/modelo_xor.npz')
    rede_complex.salvar_parametros('results/modelo_complex.npz')
    
    # ===== 7. TESTE DE CARREGAMENTO =====
    print("\nüîÑ 7. TESTANDO CARREGAMENTO DE MODELO...")
    
    # Criar nova rede e carregar par√¢metros
    rede_carregada = RedeNeural([2, 4, 1])
    rede_carregada.carregar_parametros('results/modelo_xor.npz')
    
    # Testar se funciona igual
    pred_original = rede_xor.prever(X_xor)
    pred_carregada = rede_carregada.prever(X_xor)
    
    diferenca = np.mean(np.abs(pred_original - pred_carregada))
    print(f"Diferen√ßa m√©dia entre modelos: {diferenca:.10f}")
    
    if diferenca < 1e-10:
        print("‚úÖ Modelo carregado corretamente!")
    else:
        print("‚ùå Problema no carregamento do modelo.")
    
    # ===== 8. RESUMO FINAL =====
    print("\n" + "=" * 50)
    print("üéâ EXPERIMENTOS CONCLU√çDOS!")
    print("=" * 50)
    
    print(f"\nüìä RESUMO DOS RESULTADOS:")
    print(f"XOR - Acur√°cia: {resultados_xor['acuracia']:.2f}%")
    print(f"Classifica√ß√£o Complexa - Acur√°cia: {resultados_test['acuracia']:.2f}%")
    print(f"F1-Score: {metricas['f1_score']:.4f}")
    
    print(f"\nüìÅ ARQUIVOS GERADOS:")
    print("- results/modelo_xor.npz")
    print("- results/modelo_complex.npz")
    print("- results/historico_xor.png")
    print("- results/historico_complex.png")
    print("- results/dados_teste.png")
    print("- results/fronteira_decisao.png")
    
    print("\nüí° PR√ìXIMOS PASSOS:")
    print("1. Experimente diferentes arquiteturas")
    print("2. Teste outros datasets")
    print("3. Ajuste hiperpar√¢metros")
    print("4. Implemente regulariza√ß√£o")
    
    print(f"\nüë®‚Äçüíª Criado por S√°vio - https://github.com/SavioCodes")


if __name__ == "__main__":
    main()
